import React, { Component, ErrorInfo, ReactNode } from 'react';
import { Button } from '@/components/ui/button';
import { AlertTriangle, RefreshCw, Home, Bug } from 'lucide-react';
import { errorTrackingService } from '@/services/errorTrackingService';
import { gracefulDegradationService } from '@/services/gracefulDegradationService';
import { ErrorSeverity } from '@shared/errorSchemas';

interface Props {
  children: ReactNode;
  fallback?: (error: Error, reset: () => void) => ReactNode;
  level?: 'page' | 'component' | 'feature';
  context?: Record<string, any>;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
  retryCount: number;
}

export class EnhancedErrorBoundary extends Component<Props, State> {
  private maxRetries = 3;
  
  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
      retryCount: 0
    };
  }

  static getDerivedStateFromError(error: Error): Partial<State> {
    return {
      hasError: true,
      error
    };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    this.setState({
      error,
      errorInfo
    });
    
    // Track the error
    errorTrackingService.trackError(
      error,
      {
        ...this.props.context,
        componentStack: errorInfo.componentStack,
        level: this.props.level || 'component',
        retryCount: this.state.retryCount
      },
      this.getErrorSeverity(error)
    );
    
    console.error('Error caught by Enhanced Error Boundary:', error, errorInfo);
  }
  
  private getErrorSeverity(error: Error): ErrorSeverity {
    if (this.props.level === 'page') return ErrorSeverity.HIGH;
    if (error.message.includes('ChunkLoadError')) return ErrorSeverity.MEDIUM;
    if (error.message.includes('Network')) return ErrorSeverity.MEDIUM;
    return ErrorSeverity.LOW;
  }

  private handleReset = () => {
    if (this.state.retryCount < this.maxRetries) {
      this.setState(prevState => ({
        hasError: false,
        error: null,
        errorInfo: null,
        retryCount: prevState.retryCount + 1
      }));
    }
  };

  private handleReload = () => {
    window.location.reload();
  };

  private handleGoHome = () => {
    window.location.href = '/';
  };

  private handleReportBug = () => {
    // Create a detailed bug report
    const bugReport = {
      error: this.state.error?.message,
      stack: this.state.error?.stack,
      componentStack: this.state.errorInfo?.componentStack,
      url: window.location.href,
      userAgent: navigator.userAgent,
      timestamp: new Date().toISOString(),
      context: this.props.context,
      level: this.props.level,
      retryCount: this.state.retryCount
    };
    
    // Copy to clipboard for easy sharing
    navigator.clipboard.writeText(JSON.stringify(bugReport, null, 2));
    
    errorTrackingService.trackEvent(
      'Bug report generated by user',
      ErrorSeverity.LOW,
      { action: 'user_reported_bug' }
    );
    
    alert('Bug report copied to clipboard. Please share this with our support team.');
  };

  render() {
    if (this.state.hasError) {
      // Check if there's a custom fallback
      if (this.props.fallback) {
        return this.props.fallback(this.state.error!, this.handleReset);
      }

      const canRetry = this.state.retryCount < this.maxRetries;
      const degradationStatus = gracefulDegradationService.getDegradationStatus();
      
      return (
        <div className="min-h-[400px] flex items-center justify-center p-8">
          <div className="max-w-md w-full text-center space-y-6">
            {/* Error Icon */}
            <div className="flex justify-center">
              <div className="w-16 h-16 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center">
                <AlertTriangle className="w-8 h-8 text-red-600 dark:text-red-400" />
              </div>
            </div>
            
            {/* Error Message */}
            <div className="space-y-2">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                Something went wrong
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                {this.props.level === 'page' 
                  ? 'This page encountered an error and needs to be refreshed.'
                  : 'A component on this page encountered an error.'
                }
              </p>
              
              {degradationStatus.isDegraded && (
                <div className="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                  <p className="text-sm text-yellow-800 dark:text-yellow-200">
                    {degradationStatus.message}
                  </p>
                </div>
              )}
            </div>
            
            {/* Error Details (Development) */}
            {process.env.NODE_ENV === 'development' && this.state.error && (
              <details className="text-left bg-gray-100 dark:bg-gray-800 p-4 rounded-lg">
                <summary className="cursor-pointer text-sm font-medium text-gray-700 dark:text-gray-300">
                  Error Details (Development)
                </summary>
                <pre className="mt-2 text-xs text-gray-600 dark:text-gray-400 overflow-auto">
                  {this.state.error.message}
                  {this.state.error.stack && `\n\n${this.state.error.stack}`}
                </pre>
              </details>
            )}
            
            {/* Action Buttons */}
            <div className="flex flex-col gap-3">
              {canRetry && (
                <Button 
                  onClick={this.handleReset}
                  className="w-full"
                  variant="default"
                >
                  <RefreshCw className="w-4 h-4 mr-2" />
                  Try Again ({this.maxRetries - this.state.retryCount} attempts left)
                </Button>
              )}
              
              {this.props.level !== 'page' && (
                <Button 
                  onClick={this.handleReload}
                  className="w-full"
                  variant="secondary"
                >
                  <RefreshCw className="w-4 h-4 mr-2" />
                  Reload Page
                </Button>
              )}
              
              <Button 
                onClick={this.handleGoHome}
                className="w-full"
                variant="outline"
              >
                <Home className="w-4 h-4 mr-2" />
                Go to Home
              </Button>
              
              <Button 
                onClick={this.handleReportBug}
                className="w-full"
                variant="ghost"
                size="sm"
              >
                <Bug className="w-4 h-4 mr-2" />
                Report This Issue
              </Button>
            </div>
            
            {/* Retry Counter */}
            {this.state.retryCount > 0 && (
              <p className="text-xs text-gray-500 dark:text-gray-400">
                Retry attempts: {this.state.retryCount}/{this.maxRetries}
              </p>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// Convenience components for different levels
export const PageErrorBoundary: React.FC<{ children: ReactNode }> = ({ children }) => (
  <EnhancedErrorBoundary level="page" context={{ type: 'page' }}>
    {children}
  </EnhancedErrorBoundary>
);

export const ComponentErrorBoundary: React.FC<{ 
  children: ReactNode; 
  componentName?: string;
}> = ({ children, componentName }) => (
  <EnhancedErrorBoundary 
    level="component" 
    context={{ type: 'component', componentName }}
  >
    {children}
  </EnhancedErrorBoundary>
);

export const FeatureErrorBoundary: React.FC<{ 
  children: ReactNode; 
  featureName: string;
}> = ({ children, featureName }) => (
  <EnhancedErrorBoundary 
    level="feature" 
    context={{ type: 'feature', featureName }}
  >
    {children}
  </EnhancedErrorBoundary>
);