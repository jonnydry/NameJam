import { Trash2, Copy, Heart, Calendar, Music, Users, Download, Share2, Printer, FileText } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useStash } from '@/hooks/use-stash';
import { useToast } from '@/hooks/use-toast';
import { formatDistanceToNow } from 'date-fns';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

export function Stash() {
  const { stash, removeFromStash, clearStash } = useStash();
  const { toast } = useToast();

  const handleCopy = (name: string) => {
    navigator.clipboard.writeText(name);
    toast({
      title: "Copied to clipboard!",
      description: `"${name}" has been copied.`,
    });
  };

  const handleRemove = (id: string, name: string) => {
    removeFromStash(id);
    toast({
      title: "Removed from stash",
      description: `"${name}" has been removed.`,
    });
  };

  const handleClearAll = () => {
    clearStash();
    toast({
      title: "Stash cleared",
      description: "All saved names have been removed.",
    });
  };

  const handleExportTxt = () => {
    const timestamp = new Date().toISOString().split('T')[0];
    let content = `NameJam Stash Export - ${timestamp}\n`;
    content += `Generated on ${new Date().toLocaleDateString()}\n\n`;
    
    const bandNames = stash.filter(item => item.type === 'band');
    const songNames = stash.filter(item => item.type === 'song');
    
    if (bandNames.length > 0) {
      content += `BAND NAMES (${bandNames.length}):\n`;
      content += bandNames.map((item, index) => `${index + 1}. ${item.name}`).join('\n');
      content += '\n\n';
    }
    
    if (songNames.length > 0) {
      content += `SONG NAMES (${songNames.length}):\n`;
      content += songNames.map((item, index) => `${index + 1}. ${item.name}`).join('\n');
      content += '\n\n';
    }
    
    content += `Total saved names: ${stash.length}\n`;
    content += `Generated by NameJam - The Ultimate Music Name Generator`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `namejam-stash-${timestamp}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Export successful!",
      description: `Downloaded ${stash.length} names to text file.`,
    });
  };

  const handleExportJson = () => {
    const timestamp = new Date().toISOString().split('T')[0];
    const exportData = {
      exportDate: new Date().toISOString(),
      totalNames: stash.length,
      bandNames: stash.filter(item => item.type === 'band').length,
      songNames: stash.filter(item => item.type === 'song').length,
      names: stash.map(item => ({
        name: item.name,
        type: item.type,
        savedAt: item.savedAt,
        wordCount: item.name.split(' ').length
      }))
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `namejam-stash-${timestamp}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Export successful!",
      description: `Downloaded ${stash.length} names to JSON file.`,
    });
  };

  const handlePrint = () => {
    const timestamp = new Date().toLocaleDateString();
    const bandNames = stash.filter(item => item.type === 'band');
    const songNames = stash.filter(item => item.type === 'song');
    
    let printContent = `
      <html>
        <head>
          <title>NameJam Stash - ${timestamp}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            h1 { color: #1e293b; border-bottom: 2px solid #0ea5e9; padding-bottom: 10px; }
            h2 { color: #334155; margin-top: 30px; }
            .name-list { columns: 2; column-gap: 40px; }
            .name-item { margin-bottom: 8px; break-inside: avoid; }
            .header { text-align: center; margin-bottom: 30px; }
            .footer { margin-top: 40px; text-align: center; color: #64748b; font-size: 12px; }
            .stats { background: #f1f5f9; padding: 15px; border-radius: 8px; margin: 20px 0; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>NameJam Stash</h1>
            <p>Your saved band and song names - Generated on ${timestamp}</p>
          </div>
          
          <div class="stats">
            <strong>Summary:</strong> ${stash.length} total names saved
            ${bandNames.length > 0 ? `‚Ä¢ ${bandNames.length} band names` : ''}
            ${songNames.length > 0 ? `‚Ä¢ ${songNames.length} song names` : ''}
          </div>
    `;
    
    if (bandNames.length > 0) {
      printContent += `
        <h2>Band Names (${bandNames.length})</h2>
        <div class="name-list">
          ${bandNames.map((item, index) => 
            `<div class="name-item">${index + 1}. <strong>${item.name}</strong></div>`
          ).join('')}
        </div>
      `;
    }
    
    if (songNames.length > 0) {
      printContent += `
        <h2>Song Names (${songNames.length})</h2>
        <div class="name-list">
          ${songNames.map((item, index) => 
            `<div class="name-item">${index + 1}. <strong>${item.name}</strong></div>`
          ).join('')}
        </div>
      `;
    }
    
    printContent += `
          <div class="footer">
            Generated by NameJam - The Ultimate Music Name Generator<br>
            Visit NameJam to generate more amazing names!
          </div>
        </body>
      </html>
    `;
    
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(printContent);
      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
    }
    
    toast({
      title: "Print ready!",
      description: "Opening print dialog for your stash.",
    });
  };

  const handleShareStash = async () => {
    const bandNames = stash.filter(item => item.type === 'band');
    const songNames = stash.filter(item => item.type === 'song');
    
    let shareText = `üéµ Check out my NameJam stash! I've saved ${stash.length} amazing names:\n\n`;
    
    if (bandNames.length > 0) {
      shareText += `üé∏ Band Names:\n`;
      shareText += bandNames.slice(0, 5).map(item => `‚Ä¢ ${item.name}`).join('\n');
      if (bandNames.length > 5) shareText += `\n...and ${bandNames.length - 5} more!`;
      shareText += '\n\n';
    }
    
    if (songNames.length > 0) {
      shareText += `üé§ Song Names:\n`;
      shareText += songNames.slice(0, 5).map(item => `‚Ä¢ ${item.name}`).join('\n');
      if (songNames.length > 5) shareText += `\n...and ${songNames.length - 5} more!`;
      shareText += '\n\n';
    }
    
    shareText += `Generated with NameJam - The Ultimate Music Name Generator`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My NameJam Stash',
          text: shareText,
        });
        toast({
          title: "Shared successfully!",
          description: "Your stash has been shared.",
        });
      } catch (error: any) {
        // Only fallback to clipboard if user cancelled or sharing is unavailable
        if (error.name !== 'AbortError') {
          navigator.clipboard.writeText(shareText);
          toast({
            title: "Share unavailable",
            description: "Copied share text to clipboard instead.",
          });
        }
      }
    } else {
      // Show appropriate message for browsers without native share
      toast({
        title: "Share not supported",
        description: "Your browser doesn't support native sharing. Use Export options instead.",
        variant: "destructive",
      });
    }
  };

  const handleShareSingle = async (item: any) => {
    const statusEmoji = item.verification.status === 'available' ? '‚úÖ' : 
                       item.verification.status === 'similar' ? '‚ö†Ô∏è' : '‚ùå';
    
    const shareText = `üéµ Check out this ${item.type} name from my NameJam stash:\n\n` +
                      `${item.type === 'band' ? 'üé∏' : 'üé§'} "${item.name}"\n` +
                      `${statusEmoji} Status: ${item.verification.status || 'Unknown'}\n\n` +
                      `Generated by NameJam - The Ultimate Music Name Generator`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: `NameJam - ${item.name}`,
          text: shareText,
        });
        toast({
          title: "Shared successfully!",
          description: `"${item.name}" has been shared.`,
        });
      } catch (error: any) {
        // Only fallback to clipboard if user cancelled or sharing is unavailable
        if (error.name !== 'AbortError') {
          navigator.clipboard.writeText(shareText);
          toast({
            title: "Share unavailable",
            description: "Copied share text to clipboard instead.",
          });
        }
      }
    } else {
      // Show appropriate message for browsers without native share
      toast({
        title: "Share not supported",
        description: "Your browser doesn't support native sharing. Use the copy button instead.",
        variant: "destructive",
      });
    }
  };

  if (stash.length === 0) {
    return (
      <Card className="bg-muted/50 border-muted">
        <CardHeader className="text-center">
          <div className="mx-auto w-16 h-16 rounded-full bg-muted flex items-center justify-center mb-4">
            <Heart className="w-8 h-8 text-muted-foreground" />
          </div>
          <CardTitle className="text-xl">Your Stash is Empty</CardTitle>
          <CardDescription>
            Save your favorite names by clicking the heart icon on any generated name.
          </CardDescription>
        </CardHeader>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Heart className="w-5 h-5 text-primary" />
          <h2 className="text-lg font-semibold">Your Stash</h2>
          <Badge variant="secondary">{stash.length}</Badge>
        </div>
        <div className="flex items-center space-x-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm">
                <Download className="w-4 h-4 mr-2" />
                Export & Share
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuItem onClick={handleExportTxt}>
                <FileText className="w-4 h-4 mr-2" />
                Export as Text File
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleExportJson}>
                <Download className="w-4 h-4 mr-2" />
                Export as JSON
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handlePrint}>
                <Printer className="w-4 h-4 mr-2" />
                Print Stash
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleShareStash}>
                <Share2 className="w-4 h-4 mr-2" />
                Share Stash
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          <Button
            variant="outline"
            size="sm"
            onClick={handleClearAll}
            className="text-destructive hover:text-destructive-foreground hover:bg-destructive"
          >
            <Trash2 className="w-4 h-4 mr-2" />
            Clear All
          </Button>
        </div>
      </div>

      <div className="grid gap-3">
        {stash.map((item) => (
          <Card key={item.id} className="bg-card/50 hover:bg-card/80 transition-colors">
            <CardContent className="p-4">
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <div className="flex items-center space-x-2 mb-2">
                    {item.type === 'band' ? (
                      <Users className="w-4 h-4 text-primary" />
                    ) : (
                      <Music className="w-4 h-4 text-primary" />
                    )}
                    <Badge variant="outline" className="text-xs">
                      {item.type} ‚Ä¢ {item.wordCount} word{item.wordCount !== 1 ? 's' : ''}
                    </Badge>
                  </div>
                  <h3 className="font-medium text-base mb-1 break-words">
                    {item.name}
                  </h3>
                  <div className="flex items-center space-x-2 text-xs text-muted-foreground">
                    <Calendar className="w-3 h-3" />
                    <span>
                      Saved {formatDistanceToNow(new Date(item.savedAt), { addSuffix: true })}
                    </span>
                  </div>
                  {item.verification.status && (
                    <div className="mt-2">
                      <Badge 
                        variant={
                          item.verification.status === 'available' ? 'default' :
                          item.verification.status === 'similar' ? 'secondary' : 'destructive'
                        }
                        className="text-xs"
                      >
                        {item.verification.status}
                      </Badge>
                    </div>
                  )}
                </div>
                <div className="flex items-center space-x-1 ml-4">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleShareSingle(item)}
                    className="h-8 w-8 hover:bg-primary/20"
                    title="Share this name"
                  >
                    <Share2 className="w-4 h-4" />
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleCopy(item.name)}
                    className="h-8 w-8 hover:bg-primary/20"
                    title="Copy to clipboard"
                  >
                    <Copy className="w-4 h-4" />
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleRemove(item.id, item.name)}
                    className="h-8 w-8 hover:bg-destructive/20 text-muted-foreground hover:text-destructive"
                    title="Remove from stash"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}