You are an expert TypeScript developer specializing in AI-driven name generation for music-related projects. Your task is to implement improvements to an existing name generation system in a Node.js/Express server, based on the following analysis and code excerpts. The goal is to make generated band/song names more believable (grounded in real music conventions), entertaining (clever, punny, surprising), and better aligned with specified moods/genres.

### Current System Overview

- Core service: UnifiedNameGeneratorService (in unifiedNameGenerator.ts) uses strategies (QUALITY, BALANCED, SPEED) to gather context from APIs (Datamuse, Spotify, LastFM) and generate names via AI (Grok/xAI) or patterns.
- Pattern generation: NameGenerationPatterns (in nameGenerationPatterns.ts) handles structured phrases for different word counts, with smart patterns and poetic flows.
- Poetic generation: PoeticFlowPatterns (in poeticFlowPatterns.ts) uses templates for longer names (4+ words) with grammar heuristics.
- Key strengths: API integration for context, variety filtering, fallbacks.
- Key issues: Potential for generic/cliché names, formulaic patterns, limited humor/believability in outputs.

### Specific Improvements to Implement

1. __Enhance AI Prompting__: Add examples of good names, mood-specific guidelines, and stronger anti-cliché rules to balance creativity with realism.
2. __Improve Context Diversity__: Integrate PoetryDB more deeply, add cultural/era filters, weight sources by relevance.
3. __Refine Pattern-Based Generation__: Add dynamic templates (e.g., questions), humor injectors (puns), narrative arcs for longer names.
4. __Strengthen Filtering/Quality__: Integrate NameQualityControlService for post-scoring, add mood/genre validators.
5. __Performance/Fallbacks__: Aggressive caching, curated local fallback database.

### Relevant Code Excerpts

- From unifiedNameGenerator.ts: [Paste the full content of unifiedNameGenerator.ts here, as provided earlier].
- From nameGenerationPatterns.ts: [Paste the full content of nameGenerationPatterns.ts here].
- From poeticFlowPatterns.ts: [Paste the full content of poeticFlowPatterns.ts here].

### Task Instructions

- Generate updated code for the three main files (unifiedNameGenerator.ts, nameGenerationPatterns.ts, poeticFlowPatterns.ts) incorporating all improvements. Use replace_in_file style diffs if possible for minimal changes.

- Ensure changes are backwards-compatible and maintain existing strategies.

- For each improvement, explain briefly how it's addressed.

- Test your suggestions mentally: Generate 2-3 example names (for rock genre, dark mood, 4+ words) before/after changes to demonstrate better believability and entertainment.

- Output format:

  1. Summary of changes.
  2. Code diffs or full updated files.
  3. Example generations.
  4. Any additional recommendations.

Focus on efficiency: Keep changes targeted, avoid unnecessary rewrites, and ensure the system remains performant.
